import heapq
GOAL_STATE = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
MOVES = [(0, 1), (0, -1), (1, 0), (-1, 0)]
def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_i = (state[i][j] - 1) // 3
                goal_j = (state[i][j] - 1) % 3
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance
def astar_search(initial_state):
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, (0, initial_state))
    came_from = {}
    g_score = {tuple(map(tuple, initial_state)): 0}
    f_score = {tuple(map(tuple, initial_state)): heuristic(initial_state)}

    while open_list:
        current = heapq.heappop(open_list)[1]
        if current == GOAL_STATE:
            return reconstruct_path(came_from, current)

        closed_list.add(tuple(map(tuple, current)))
        for move in MOVES:
            new_state = move_state(current, move)
            if new_state and tuple(map(tuple, new_state)) not in closed_list:
                new_g_score = g_score[tuple(map(tuple, current))] + 1
                new_f_score = new_g_score + heuristic(new_state)
                if tuple(map(tuple, new_state)) not in g_score or new_g_score < g_score[tuple(map(tuple, new_state))]:
                    came_from[tuple(map(tuple, new_state))] = current
                    g_score[tuple(map(tuple, new_state))] = new_g_score
                    f_score[tuple(map(tuple, new_state))] = new_f_score
                    heapq.heappush(open_list, (new_f_score, new_state))

    return None
def move_state(state, move):
    new_state = [row[:] for row in state]
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                new_i = i + move[0]
                new_j = j + move[1]
                if 0 <= new_i < 3 and 0 <= new_j < 3:
                    new_state[i][j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[i][j]
                    return new_state
    return None
def reconstruct_path(came_from, current):
    path = [current]
    while tuple(map(tuple, current)) in came_from:
        current = came_from[tuple(map(tuple, current))]
        path.append(current)
    return path[::-1]
initial_state = [[1, 2, 3], [4, 0, 6], [7, 5, 8]]
path = astar_search(initial_state)
if path:
    for state in path:
        print(state)
else:
    print("No solution found")
